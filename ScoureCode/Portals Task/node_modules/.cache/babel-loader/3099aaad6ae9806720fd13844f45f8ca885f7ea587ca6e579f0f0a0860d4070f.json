{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport * as moment from 'moment';\nimport padStart from 'lodash/padStart';\nimport interopDefault from '../_util/interopDefault'; // Countdown\n\nvar timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1]];\nexport function formatTimeStr(duration, format) {\n  var leftDuration = duration;\n  var escapeRegex = /\\[[^\\]]*\\]/g;\n  var keepList = (format.match(escapeRegex) || []).map(function (str) {\n    return str.slice(1, -1);\n  });\n  var templateText = format.replace(escapeRegex, '[]');\n  var replacedText = timeUnits.reduce(function (current, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      unit = _ref2[1];\n    if (current.indexOf(name) !== -1) {\n      var value = Math.floor(leftDuration / unit);\n      leftDuration -= value * unit;\n      return current.replace(new RegExp(\"\".concat(name, \"+\"), 'g'), function (match) {\n        var len = match.length;\n        return padStart(value.toString(), len, '0');\n      });\n    }\n    return current;\n  }, templateText);\n  var index = 0;\n  return replacedText.replace(escapeRegex, function () {\n    var match = keepList[index];\n    index += 1;\n    return match;\n  });\n}\nexport function formatCountdown(value, config) {\n  var _config$format = config.format,\n    format = _config$format === void 0 ? '' : _config$format;\n  var target = interopDefault(moment)(value).valueOf();\n  var current = interopDefault(moment)().valueOf();\n  var diff = Math.max(target - current, 0);\n  return formatTimeStr(diff, format);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B,C,CACA;;AACA,IAAMC,SAAS,GAAG,CACd,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,GAA5B,CADc,EAEd,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAA5B,CAFc,EAGd,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAvB,CAHc,EAId,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAlB,CAJc,EAKd,CAAC,GAAD,EAAM,OAAO,EAAb,CALc,EAMd,CAAC,GAAD,EAAM,IAAN,CANc,EAOd,CAAC,GAAD,EAAM,CAAN,CAPc,CAAlB;AASA,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,MAAjC,EAAyC;EAC5C,IAAIC,YAAY,GAAGF,QAAnB;EACA,IAAMG,WAAW,GAAG,aAApB;EACA,IAAMC,QAAQ,GAAG,CAACH,MAAM,CAACI,KAAP,CAAaF,WAAb,KAA6B,EAA9B,EAAkCG,GAAlC,CAAsC,aAAG;IAAA,OAAIC,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAJ;EAAA,CAAzC,CAAjB;EACA,IAAMC,YAAY,GAAGR,MAAM,CAACS,OAAP,CAAeP,WAAf,EAA4B,IAA5B,CAArB;EACA,IAAMQ,YAAY,GAAGb,SAAS,CAACc,MAAV,CAAiB,UAACC,OAAD,QAA2B;IAAA;MAAhBC,IAAgB;MAAVC,IAAU;IAC7D,IAAIF,OAAO,CAACG,OAAR,CAAgBF,IAAhB,MAA0B,CAAC,CAA/B,EAAkC;MAC9B,IAAMG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWjB,YAAY,GAAGa,IAA1B,CAAd;MACAb,YAAY,IAAIe,KAAK,GAAGF,IAAxB;MACA,OAAOF,OAAO,CAACH,OAAR,CAAgB,IAAIU,MAAJ,WAAcN,IAAd,QAAuB,GAAvB,CAAhB,EAA6C,UAACT,KAAD,EAAW;QAC3D,IAAMgB,GAAG,GAAGhB,KAAK,CAACiB,MAAlB;QACA,OAAO1B,QAAQ,CAACqB,KAAK,CAACM,QAAN,EAAD,EAAmBF,GAAnB,EAAwB,GAAxB,CAAf;MACH,CAHM,CAAP;IAIH;IACD,OAAOR,OAAP;EACH,CAVoB,EAUlBJ,YAVkB,CAArB;EAWA,IAAIe,KAAK,GAAG,CAAZ;EACA,OAAOb,YAAY,CAACD,OAAb,CAAqBP,WAArB,EAAkC,YAAM;IAC3C,IAAME,KAAK,GAAGD,QAAQ,CAACoB,KAAD,CAAtB;IACAA,KAAK,IAAI,CAAT;IACA,OAAOnB,KAAP;EACH,CAJM,CAAP;AAKH;AACD,OAAO,SAASoB,eAAT,CAAyBR,KAAzB,EAAgCS,MAAhC,EAAwC;EAAA,qBACnBA,MADmB,CACnCzB,MADmC;IACnCA,MADmC,+BAC1B,EAD0B;EAE3C,IAAM0B,MAAM,GAAG9B,cAAc,CAACF,MAAD,CAAd,CAAuBsB,KAAvB,EAA8BW,OAA9B,EAAf;EACA,IAAMf,OAAO,GAAGhB,cAAc,CAACF,MAAD,CAAd,GAAyBiC,OAAzB,EAAhB;EACA,IAAMC,IAAI,GAAGX,IAAI,CAACY,GAAL,CAASH,MAAM,GAAGd,OAAlB,EAA2B,CAA3B,CAAb;EACA,OAAOd,aAAa,CAAC8B,IAAD,EAAO5B,MAAP,CAApB;AACH","names":["moment","padStart","interopDefault","timeUnits","formatTimeStr","duration","format","leftDuration","escapeRegex","keepList","match","map","str","slice","templateText","replace","replacedText","reduce","current","name","unit","indexOf","value","Math","floor","RegExp","len","length","toString","index","formatCountdown","config","target","valueOf","diff","max"],"sources":["C:\\xampp\\htdocs\\teambuilding-photo\\node_modules\\antd\\es\\statistic\\statistic\\utils.jsx"],"sourcesContent":["import * as moment from 'moment';\nimport padStart from 'lodash/padStart';\nimport interopDefault from '../_util/interopDefault';\n// Countdown\nconst timeUnits = [\n    ['Y', 1000 * 60 * 60 * 24 * 365],\n    ['M', 1000 * 60 * 60 * 24 * 30],\n    ['D', 1000 * 60 * 60 * 24],\n    ['H', 1000 * 60 * 60],\n    ['m', 1000 * 60],\n    ['s', 1000],\n    ['S', 1],\n];\nexport function formatTimeStr(duration, format) {\n    let leftDuration = duration;\n    const escapeRegex = /\\[[^\\]]*\\]/g;\n    const keepList = (format.match(escapeRegex) || []).map(str => str.slice(1, -1));\n    const templateText = format.replace(escapeRegex, '[]');\n    const replacedText = timeUnits.reduce((current, [name, unit]) => {\n        if (current.indexOf(name) !== -1) {\n            const value = Math.floor(leftDuration / unit);\n            leftDuration -= value * unit;\n            return current.replace(new RegExp(`${name}+`, 'g'), (match) => {\n                const len = match.length;\n                return padStart(value.toString(), len, '0');\n            });\n        }\n        return current;\n    }, templateText);\n    let index = 0;\n    return replacedText.replace(escapeRegex, () => {\n        const match = keepList[index];\n        index += 1;\n        return match;\n    });\n}\nexport function formatCountdown(value, config) {\n    const { format = '' } = config;\n    const target = interopDefault(moment)(value).valueOf();\n    const current = interopDefault(moment)().valueOf();\n    const diff = Math.max(target - current, 0);\n    return formatTimeStr(diff, format);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}