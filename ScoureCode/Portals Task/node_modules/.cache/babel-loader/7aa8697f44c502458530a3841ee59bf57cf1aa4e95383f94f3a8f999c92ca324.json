{"ast":null,"code":"import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\nvar StatisticNumber = function StatisticNumber(props) {\n  var value = props.value,\n    formatter = props.formatter,\n    precision = props.precision,\n    decimalSeparator = props.decimalSeparator,\n    _props$groupSeparator = props.groupSeparator,\n    groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,\n    prefixCls = props.prefixCls;\n  var valueNode;\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    var val = String(value);\n    var cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/); // Process if illegal number\n\n    if (!cells) {\n      valueNode = val;\n    } else {\n      var negative = cells[1];\n      var _int = cells[2] || '0';\n      var decimal = cells[4] || '';\n      _int = _int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n      if (typeof precision === 'number') {\n        decimal = padEnd(decimal, precision, '0').slice(0, precision);\n      }\n      if (decimal) {\n        decimal = \"\".concat(decimalSeparator).concat(decimal);\n      }\n      valueNode = [React.createElement(\"span\", {\n        key: \"int\",\n        className: \"\".concat(prefixCls, \"-content-value-int\")\n      }, negative, _int), decimal && React.createElement(\"span\", {\n        key: \"decimal\",\n        className: \"\".concat(prefixCls, \"-content-value-decimal\")\n      }, decimal)];\n    }\n  }\n  return React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-value\")\n  }, valueNode);\n};\nexport default StatisticNumber;","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,MAAK,EAAI;EAAA,IACrBC,KADqB,GAC6DC,KAD7D,CACrBD,KADqB;IACdE,SADc,GAC6DD,KAD7D,CACdC,SADc;IACHC,SADG,GAC6DF,KAD7D,CACHE,SADG;IACQC,gBADR,GAC6DH,KAD7D,CACQG,gBADR;IAAAC,wBAC6DJ,KAD7D,CAC0BK,cAD1B;IAC0BA,cAD1B,sCAC2C,EAD3C;IAC+CC,SAD/C,GAC6DN,KAD7D,CAC+CM,SAD/C;EAE7B,IAAIC,SAAJ;EACA,IAAI,OAAON,SAAP,KAAqB,UAAzB,EAAqC;IACjC;IACAM,SAAS,GAAGN,SAAS,CAACF,KAAD,CAArB;EACH,CAHD,MAIK;IACD;IACA,IAAMS,GAAG,GAAGC,MAAM,CAACV,KAAD,CAAlB;IACA,IAAMW,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,uBAAV,CAAd,CAHC,CAID;;IACA,IAAI,CAACD,KAAL,EAAY;MACRH,SAAS,GAAGC,GAAZ;IACH,CAFD,MAGK;MACD,IAAMI,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAtB;MACA,IAAIG,IAAG,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,GAAtB;MACA,IAAII,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;MACAG,IAAG,GAAGA,IAAG,CAACE,OAAJ,CAAY,uBAAZ,EAAqCV,cAArC,CAAN;MACA,IAAI,OAAOH,SAAP,KAAqB,QAAzB,EAAmC;QAC/BY,OAAO,GAAGjB,MAAM,CAACiB,OAAD,EAAUZ,SAAV,EAAqB,GAArB,CAAN,CAAgCc,KAAhC,CAAsC,CAAtC,EAAyCd,SAAzC,CAAV;MACH;MACD,IAAIY,OAAJ,EAAa;QACTA,OAAO,aAAMX,gBAAN,SAAyBW,OAAzB,CAAP;MACH;MACDP,SAAS,GAAG,CACRX;QAAMqB,GAAG,EAAC,KAAV;QAAgBC,SAAS,YAAKZ,SAAL;MAAzB,GACLM,QADK,EAELC,IAFK,CADQ,EAKRC,OAAO,IAAKlB;QAAMqB,GAAG,EAAC,SAAV;QAAoBC,SAAS,YAAKZ,SAAL;MAA7B,GACfQ,OADe,CALJ,CAAZ;IASH;EACJ;EACD,OAAOlB;IAAMsB,SAAS,YAAKZ,SAAL;EAAf,GAAgDC,SAAhD,CAAP;AACH,CAtCD;AAuCA,eAAeT,eAAf","names":["React","padEnd","StatisticNumber","value","props","formatter","precision","decimalSeparator","_props$groupSeparator","groupSeparator","prefixCls","valueNode","val","String","cells","match","negative","int","decimal","replace","slice","key","className"],"sources":["C:\\xampp\\htdocs\\teambuilding-photo\\node_modules\\antd\\es\\statistic\\statistic\\Number.jsx"],"sourcesContent":["import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\nconst StatisticNumber = props => {\n    const { value, formatter, precision, decimalSeparator, groupSeparator = '', prefixCls } = props;\n    let valueNode;\n    if (typeof formatter === 'function') {\n        // Customize formatter\n        valueNode = formatter(value);\n    }\n    else {\n        // Internal formatter\n        const val = String(value);\n        const cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n        // Process if illegal number\n        if (!cells) {\n            valueNode = val;\n        }\n        else {\n            const negative = cells[1];\n            let int = cells[2] || '0';\n            let decimal = cells[4] || '';\n            int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n            if (typeof precision === 'number') {\n                decimal = padEnd(decimal, precision, '0').slice(0, precision);\n            }\n            if (decimal) {\n                decimal = `${decimalSeparator}${decimal}`;\n            }\n            valueNode = [\n                <span key=\"int\" className={`${prefixCls}-content-value-int`}>\n          {negative}\n          {int}\n        </span>,\n                decimal && (<span key=\"decimal\" className={`${prefixCls}-content-value-decimal`}>\n            {decimal}\n          </span>),\n            ];\n        }\n    }\n    return <span className={`${prefixCls}-content-value`}>{valueNode}</span>;\n};\nexport default StatisticNumber;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}