{"ast":null,"code":"import { render, unmountComponentAtNode } from 'react-dom';\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\"; // We only handle element & text node.\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar ellipsisContainer;\nvar wrapperStyle = {\n  padding: 0,\n  margin: 0,\n  display: 'inline',\n  lineHeight: 'inherit'\n};\nfunction pxToNumber(value) {\n  if (!value) return 0;\n  var match = value.match(/^\\d*(\\.\\d*)?/);\n  return match ? Number(match[0]) : 0;\n}\nfunction styleToString(style) {\n  // There are some different behavior between Firefox & Chrome.\n  // We have to handle this ourself.\n  var styleNames = Array.prototype.slice.apply(style);\n  return styleNames.map(function (name) {\n    return \"\".concat(name, \": \").concat(style.getPropertyValue(name), \";\");\n  }).join('');\n}\nfunction mergeChildren(children) {\n  var childList = [];\n  children.forEach(function (child) {\n    var prevChild = childList[childList.length - 1];\n    if (typeof child === 'string' && typeof prevChild === 'string') {\n      childList[childList.length - 1] += child;\n    } else {\n      childList.push(child);\n    }\n  });\n  return childList;\n}\nexport default (function (originEle, rows, content, fixedContent, ellipsisStr) {\n  if (!ellipsisContainer) {\n    ellipsisContainer = document.createElement('div');\n    ellipsisContainer.setAttribute('aria-hidden', 'true');\n    document.body.appendChild(ellipsisContainer);\n  } // Get origin style\n\n  var originStyle = window.getComputedStyle(originEle);\n  var originCSS = styleToString(originStyle);\n  var lineHeight = pxToNumber(originStyle.lineHeight);\n  var maxHeight = lineHeight * (rows + 1) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom); // Set shadow\n\n  ellipsisContainer.setAttribute('style', originCSS);\n  ellipsisContainer.style.position = 'fixed';\n  ellipsisContainer.style.left = '0';\n  ellipsisContainer.style.height = 'auto';\n  ellipsisContainer.style.minHeight = 'auto';\n  ellipsisContainer.style.maxHeight = 'auto';\n  ellipsisContainer.style.top = '-999999px';\n  ellipsisContainer.style.zIndex = '-1000'; // clean up css overflow\n\n  ellipsisContainer.style.textOverflow = 'clip';\n  ellipsisContainer.style.whiteSpace = 'normal';\n  ellipsisContainer.style.webkitLineClamp = 'none'; // Render in the fake container\n\n  var contentList = mergeChildren(toArray(content));\n  render(React.createElement(\"div\", {\n    style: wrapperStyle\n  }, React.createElement(\"span\", {\n    style: wrapperStyle\n  }, contentList), React.createElement(\"span\", {\n    style: wrapperStyle\n  }, fixedContent)), ellipsisContainer); // wrap in an div for old version react\n  // Check if ellipsis in measure div is height enough for content\n\n  function inRange() {\n    return ellipsisContainer.offsetHeight < maxHeight;\n  } // Skip ellipsis if already match\n\n  if (inRange()) {\n    unmountComponentAtNode(ellipsisContainer);\n    return {\n      content: content,\n      text: ellipsisContainer.innerHTML,\n      ellipsis: false\n    };\n  } // We should clone the childNode since they're controlled by React and we can't reuse it without warning\n\n  var childNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes).filter(function (_ref) {\n    var nodeType = _ref.nodeType;\n    return nodeType !== COMMENT_NODE;\n  });\n  var fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);\n  unmountComponentAtNode(ellipsisContainer); // ========================= Find match ellipsis content =========================\n\n  var ellipsisChildren = [];\n  ellipsisContainer.innerHTML = ''; // Create origin content holder\n\n  var ellipsisContentHolder = document.createElement('span');\n  ellipsisContainer.appendChild(ellipsisContentHolder);\n  var ellipsisTextNode = document.createTextNode(ellipsisStr);\n  ellipsisContentHolder.appendChild(ellipsisTextNode);\n  fixedNodes.forEach(function (childNode) {\n    ellipsisContainer.appendChild(childNode);\n  }); // Append before fixed nodes\n\n  function appendChildNode(node) {\n    ellipsisContentHolder.insertBefore(node, ellipsisTextNode);\n  } // Get maximum text\n\n  function measureText(textNode, fullText) {\n    var startLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var endLoc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : fullText.length;\n    var lastSuccessLoc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    var midLoc = Math.floor((startLoc + endLoc) / 2);\n    var currentText = fullText.slice(0, midLoc);\n    textNode.textContent = currentText;\n    if (startLoc >= endLoc - 1) {\n      // Loop when step is small\n      for (var step = endLoc; step >= startLoc; step -= 1) {\n        var currentStepText = fullText.slice(0, step);\n        textNode.textContent = currentStepText;\n        if (inRange()) {\n          return step === fullText.length ? {\n            finished: false,\n            reactNode: fullText\n          } : {\n            finished: true,\n            reactNode: currentStepText\n          };\n        }\n      }\n    }\n    if (inRange()) {\n      return measureText(textNode, fullText, midLoc, endLoc, midLoc);\n    }\n    return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);\n  }\n  function measureNode(childNode, index) {\n    var type = childNode.nodeType;\n    if (type === ELEMENT_NODE) {\n      // We don't split element, it will keep if whole element can be displayed.\n      appendChildNode(childNode);\n      if (inRange()) {\n        return {\n          finished: false,\n          reactNode: contentList[index]\n        };\n      } // Clean up if can not pull in\n\n      ellipsisContentHolder.removeChild(childNode);\n      return {\n        finished: true,\n        reactNode: null\n      };\n    }\n    if (type === TEXT_NODE) {\n      var fullText = childNode.textContent || '';\n      var textNode = document.createTextNode(fullText);\n      appendChildNode(textNode);\n      return measureText(textNode, fullText);\n    } // Not handle other type of content\n    // PS: This code should not be attached after react 16\n\n    return {\n      finished: false,\n      reactNode: null\n    };\n  }\n  childNodes.some(function (childNode, index) {\n    var _measureNode = measureNode(childNode, index),\n      finished = _measureNode.finished,\n      reactNode = _measureNode.reactNode;\n    if (reactNode) {\n      ellipsisChildren.push(reactNode);\n    }\n    return finished;\n  });\n  return {\n    content: ellipsisChildren,\n    text: ellipsisContainer.innerHTML,\n    ellipsis: true\n  };\n});","map":{"version":3,"mappings":"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","names":["render","unmountComponentAtNode","React","toArray","ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","ellipsisContainer","wrapperStyle","padding","margin","display","lineHeight","pxToNumber","value","match","Number","styleToString","style","styleNames","Array","prototype","slice","apply","map","name","getPropertyValue","join","mergeChildren","children","childList","forEach","child","prevChild","length","push","originEle","rows","content","fixedContent","ellipsisStr","document","createElement","setAttribute","body","appendChild","originStyle","window","getComputedStyle","originCSS","maxHeight","paddingTop","paddingBottom","position","left","height","minHeight","top","zIndex","textOverflow","whiteSpace","webkitLineClamp","contentList","inRange","offsetHeight","text","innerHTML","ellipsis","childNodes","cloneNode","filter","nodeType","fixedNodes","ellipsisChildren","ellipsisContentHolder","ellipsisTextNode","createTextNode","childNode","appendChildNode","node","insertBefore","measureText","textNode","fullText","startLoc","endLoc","lastSuccessLoc","midLoc","Math","floor","currentText","textContent","step","currentStepText","finished","reactNode","measureNode","index","type","removeChild","some"],"sources":["C:\\xampp\\htdocs\\teambuilding-photo\\node_modules\\antd\\es\\typography\\typography\\util.jsx"],"sourcesContent":["import { render, unmountComponentAtNode } from 'react-dom';\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\n// We only handle element & text node.\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nlet ellipsisContainer;\nconst wrapperStyle = {\n    padding: 0,\n    margin: 0,\n    display: 'inline',\n    lineHeight: 'inherit',\n};\nfunction pxToNumber(value) {\n    if (!value)\n        return 0;\n    const match = value.match(/^\\d*(\\.\\d*)?/);\n    return match ? Number(match[0]) : 0;\n}\nfunction styleToString(style) {\n    // There are some different behavior between Firefox & Chrome.\n    // We have to handle this ourself.\n    const styleNames = Array.prototype.slice.apply(style);\n    return styleNames.map(name => `${name}: ${style.getPropertyValue(name)};`).join('');\n}\nfunction mergeChildren(children) {\n    const childList = [];\n    children.forEach((child) => {\n        const prevChild = childList[childList.length - 1];\n        if (typeof child === 'string' && typeof prevChild === 'string') {\n            childList[childList.length - 1] += child;\n        }\n        else {\n            childList.push(child);\n        }\n    });\n    return childList;\n}\nexport default (originEle, rows, content, fixedContent, ellipsisStr) => {\n    if (!ellipsisContainer) {\n        ellipsisContainer = document.createElement('div');\n        ellipsisContainer.setAttribute('aria-hidden', 'true');\n        document.body.appendChild(ellipsisContainer);\n    }\n    // Get origin style\n    const originStyle = window.getComputedStyle(originEle);\n    const originCSS = styleToString(originStyle);\n    const lineHeight = pxToNumber(originStyle.lineHeight);\n    const maxHeight = lineHeight * (rows + 1) +\n        pxToNumber(originStyle.paddingTop) +\n        pxToNumber(originStyle.paddingBottom);\n    // Set shadow\n    ellipsisContainer.setAttribute('style', originCSS);\n    ellipsisContainer.style.position = 'fixed';\n    ellipsisContainer.style.left = '0';\n    ellipsisContainer.style.height = 'auto';\n    ellipsisContainer.style.minHeight = 'auto';\n    ellipsisContainer.style.maxHeight = 'auto';\n    ellipsisContainer.style.top = '-999999px';\n    ellipsisContainer.style.zIndex = '-1000';\n    // clean up css overflow\n    ellipsisContainer.style.textOverflow = 'clip';\n    ellipsisContainer.style.whiteSpace = 'normal';\n    ellipsisContainer.style.webkitLineClamp = 'none';\n    // Render in the fake container\n    const contentList = mergeChildren(toArray(content));\n    render(<div style={wrapperStyle}>\n      <span style={wrapperStyle}>{contentList}</span>\n      <span style={wrapperStyle}>{fixedContent}</span>\n    </div>, ellipsisContainer); // wrap in an div for old version react\n    // Check if ellipsis in measure div is height enough for content\n    function inRange() {\n        return ellipsisContainer.offsetHeight < maxHeight;\n    }\n    // Skip ellipsis if already match\n    if (inRange()) {\n        unmountComponentAtNode(ellipsisContainer);\n        return { content, text: ellipsisContainer.innerHTML, ellipsis: false };\n    }\n    // We should clone the childNode since they're controlled by React and we can't reuse it without warning\n    const childNodes = Array.prototype.slice\n        .apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes)\n        .filter(({ nodeType }) => nodeType !== COMMENT_NODE);\n    const fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);\n    unmountComponentAtNode(ellipsisContainer);\n    // ========================= Find match ellipsis content =========================\n    const ellipsisChildren = [];\n    ellipsisContainer.innerHTML = '';\n    // Create origin content holder\n    const ellipsisContentHolder = document.createElement('span');\n    ellipsisContainer.appendChild(ellipsisContentHolder);\n    const ellipsisTextNode = document.createTextNode(ellipsisStr);\n    ellipsisContentHolder.appendChild(ellipsisTextNode);\n    fixedNodes.forEach(childNode => {\n        ellipsisContainer.appendChild(childNode);\n    });\n    // Append before fixed nodes\n    function appendChildNode(node) {\n        ellipsisContentHolder.insertBefore(node, ellipsisTextNode);\n    }\n    // Get maximum text\n    function measureText(textNode, fullText, startLoc = 0, endLoc = fullText.length, lastSuccessLoc = 0) {\n        const midLoc = Math.floor((startLoc + endLoc) / 2);\n        const currentText = fullText.slice(0, midLoc);\n        textNode.textContent = currentText;\n        if (startLoc >= endLoc - 1) {\n            // Loop when step is small\n            for (let step = endLoc; step >= startLoc; step -= 1) {\n                const currentStepText = fullText.slice(0, step);\n                textNode.textContent = currentStepText;\n                if (inRange()) {\n                    return step === fullText.length\n                        ? {\n                            finished: false,\n                            reactNode: fullText,\n                        }\n                        : {\n                            finished: true,\n                            reactNode: currentStepText,\n                        };\n                }\n            }\n        }\n        if (inRange()) {\n            return measureText(textNode, fullText, midLoc, endLoc, midLoc);\n        }\n        return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);\n    }\n    function measureNode(childNode, index) {\n        const type = childNode.nodeType;\n        if (type === ELEMENT_NODE) {\n            // We don't split element, it will keep if whole element can be displayed.\n            appendChildNode(childNode);\n            if (inRange()) {\n                return {\n                    finished: false,\n                    reactNode: contentList[index],\n                };\n            }\n            // Clean up if can not pull in\n            ellipsisContentHolder.removeChild(childNode);\n            return {\n                finished: true,\n                reactNode: null,\n            };\n        }\n        if (type === TEXT_NODE) {\n            const fullText = childNode.textContent || '';\n            const textNode = document.createTextNode(fullText);\n            appendChildNode(textNode);\n            return measureText(textNode, fullText);\n        }\n        // Not handle other type of content\n        // PS: This code should not be attached after react 16\n        return {\n            finished: false,\n            reactNode: null,\n        };\n    }\n    childNodes.some((childNode, index) => {\n        const { finished, reactNode } = measureNode(childNode, index);\n        if (reactNode) {\n            ellipsisChildren.push(reactNode);\n        }\n        return finished;\n    });\n    return {\n        content: ellipsisChildren,\n        text: ellipsisContainer.innerHTML,\n        ellipsis: true,\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}