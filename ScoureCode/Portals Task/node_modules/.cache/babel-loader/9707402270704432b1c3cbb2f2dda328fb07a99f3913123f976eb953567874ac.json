{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport copy from 'copy-to-clipboard';\nimport omit from 'omit.js';\nimport ResizeObserver from 'rc-resize-observer';\nimport { configConsumerProps } from '../config-provider';\nimport { withConfigConsumer } from '../config-provider/context';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning';\nimport TransButton from '../_util/transButton';\nimport raf from '../_util/raf';\nimport isStyleSupport from '../_util/styleChecker';\nimport Icon from '../icon';\nimport Tooltip from '../tooltip';\nimport Typography from './Typography';\nimport Editable from './Editable';\nimport measure from './util';\nvar isLineClampSupport = isStyleSupport('webkitLineClamp');\nvar isTextOverflowSupport = isStyleSupport('textOverflow');\nfunction wrapperDecorations(_ref, content) {\n  var mark = _ref.mark,\n    code = _ref.code,\n    underline = _ref.underline,\n    del = _ref[\"delete\"],\n    strong = _ref.strong;\n  var currentContent = content;\n  function wrap(needed, tag) {\n    if (!needed) return;\n    currentContent = React.createElement(tag, {}, currentContent);\n  }\n  wrap(strong, 'strong');\n  wrap(underline, 'u');\n  wrap(del, 'del');\n  wrap(code, 'code');\n  wrap(mark, 'mark');\n  return currentContent;\n}\nvar ELLIPSIS_STR = '...';\nvar Base = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Base, _React$Component);\n  function Base() {\n    var _this;\n    _classCallCheck(this, Base);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Base).apply(this, arguments));\n    _this.state = {\n      edit: false,\n      copied: false,\n      ellipsisText: '',\n      ellipsisContent: null,\n      isEllipsis: false,\n      expanded: false,\n      clientRendered: false\n    }; // =============== Expend ===============\n\n    _this.onExpandClick = function () {\n      var _this$getEllipsis = _this.getEllipsis(),\n        onExpand = _this$getEllipsis.onExpand;\n      _this.setState({\n        expanded: true\n      });\n      if (onExpand) {\n        onExpand();\n      }\n    }; // ================ Edit ================\n\n    _this.onEditClick = function () {\n      _this.triggerEdit(true);\n    };\n    _this.onEditChange = function (value) {\n      var _this$getEditable = _this.getEditable(),\n        onChange = _this$getEditable.onChange;\n      if (onChange) {\n        onChange(value);\n      }\n      _this.triggerEdit(false);\n    };\n    _this.onEditCancel = function () {\n      _this.triggerEdit(false);\n    }; // ================ Copy ================\n\n    _this.onCopyClick = function () {\n      var _this$props = _this.props,\n        children = _this$props.children,\n        copyable = _this$props.copyable;\n      var copyConfig = _extends({}, _typeof(copyable) === 'object' ? copyable : null);\n      if (copyConfig.text === undefined) {\n        copyConfig.text = String(children);\n      }\n      copy(copyConfig.text || '');\n      _this.setState({\n        copied: true\n      }, function () {\n        if (copyConfig.onCopy) {\n          copyConfig.onCopy();\n        }\n        _this.copyId = window.setTimeout(function () {\n          _this.setState({\n            copied: false\n          });\n        }, 3000);\n      });\n    };\n    _this.setContentRef = function (node) {\n      _this.content = node;\n    };\n    _this.setEditRef = function (node) {\n      _this.editIcon = node;\n    };\n    _this.triggerEdit = function (edit) {\n      var _this$getEditable2 = _this.getEditable(),\n        onStart = _this$getEditable2.onStart;\n      if (edit && onStart) {\n        onStart();\n      }\n      _this.setState({\n        edit: edit\n      }, function () {\n        if (!edit && _this.editIcon) {\n          _this.editIcon.focus();\n        }\n      });\n    }; // ============== Ellipsis ==============\n\n    _this.resizeOnNextFrame = function () {\n      raf.cancel(_this.rafId);\n      _this.rafId = raf(function () {\n        // Do not bind `syncEllipsis`. It need for test usage on prototype\n        _this.syncEllipsis();\n      });\n    };\n    return _this;\n  }\n  _createClass(Base, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        clientRendered: true\n      });\n      this.resizeOnNextFrame();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var children = this.props.children;\n      var ellipsis = this.getEllipsis();\n      var prevEllipsis = this.getEllipsis(prevProps);\n      if (children !== prevProps.children || ellipsis.rows !== prevEllipsis.rows) {\n        this.resizeOnNextFrame();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.clearTimeout(this.copyId);\n      raf.cancel(this.rafId);\n    }\n  }, {\n    key: \"getEditable\",\n    value: function getEditable(props) {\n      var edit = this.state.edit;\n      var _ref2 = props || this.props,\n        editable = _ref2.editable;\n      if (!editable) return {\n        editing: edit\n      };\n      return _extends({\n        editing: edit\n      }, _typeof(editable) === 'object' ? editable : null);\n    }\n  }, {\n    key: \"getEllipsis\",\n    value: function getEllipsis(props) {\n      var _ref3 = props || this.props,\n        ellipsis = _ref3.ellipsis;\n      if (!ellipsis) return {};\n      return _extends({\n        rows: 1,\n        expandable: false\n      }, _typeof(ellipsis) === 'object' ? ellipsis : null);\n    }\n  }, {\n    key: \"canUseCSSEllipsis\",\n    value: function canUseCSSEllipsis() {\n      var clientRendered = this.state.clientRendered;\n      var _this$props2 = this.props,\n        editable = _this$props2.editable,\n        copyable = _this$props2.copyable;\n      var _this$getEllipsis2 = this.getEllipsis(),\n        rows = _this$getEllipsis2.rows,\n        expandable = _this$getEllipsis2.expandable; // Can't use css ellipsis since we need to provide the place for button\n\n      if (editable || copyable || expandable || !clientRendered) {\n        return false;\n      }\n      if (rows === 1) {\n        return isTextOverflowSupport;\n      }\n      return isLineClampSupport;\n    }\n  }, {\n    key: \"syncEllipsis\",\n    value: function syncEllipsis() {\n      var _this$state = this.state,\n        ellipsisText = _this$state.ellipsisText,\n        isEllipsis = _this$state.isEllipsis,\n        expanded = _this$state.expanded;\n      var _this$getEllipsis3 = this.getEllipsis(),\n        rows = _this$getEllipsis3.rows;\n      var children = this.props.children;\n      if (!rows || rows < 0 || !this.content || expanded) return; // Do not measure if css already support ellipsis\n\n      if (this.canUseCSSEllipsis()) return;\n      warning(toArray(children).every(function (child) {\n        return typeof child === 'string';\n      }), 'Typography', '`ellipsis` should use string as children only.');\n      var _measure = measure(findDOMNode(this.content), rows, children, this.renderOperations(true), ELLIPSIS_STR),\n        content = _measure.content,\n        text = _measure.text,\n        ellipsis = _measure.ellipsis;\n      if (ellipsisText !== text || isEllipsis !== ellipsis) {\n        this.setState({\n          ellipsisText: text,\n          ellipsisContent: content,\n          isEllipsis: ellipsis\n        });\n      }\n    }\n  }, {\n    key: \"renderExpand\",\n    value: function renderExpand(forceRender) {\n      var _this$getEllipsis4 = this.getEllipsis(),\n        expandable = _this$getEllipsis4.expandable;\n      var prefixCls = this.props.prefixCls;\n      var _this$state2 = this.state,\n        expanded = _this$state2.expanded,\n        isEllipsis = _this$state2.isEllipsis;\n      if (!expandable) return null; // force render expand icon for measure usage or it will cause dead loop\n\n      if (!forceRender && (expanded || !isEllipsis)) return null;\n      return React.createElement(\"a\", {\n        key: \"expand\",\n        className: \"\".concat(prefixCls, \"-expand\"),\n        onClick: this.onExpandClick,\n        \"aria-label\": this.expandStr\n      }, this.expandStr);\n    }\n  }, {\n    key: \"renderEdit\",\n    value: function renderEdit() {\n      var _this$props3 = this.props,\n        editable = _this$props3.editable,\n        prefixCls = _this$props3.prefixCls;\n      if (!editable) return;\n      return React.createElement(Tooltip, {\n        key: \"edit\",\n        title: this.editStr\n      }, React.createElement(TransButton, {\n        ref: this.setEditRef,\n        className: \"\".concat(prefixCls, \"-edit\"),\n        onClick: this.onEditClick,\n        \"aria-label\": this.editStr\n      }, React.createElement(Icon, {\n        role: \"button\",\n        type: \"edit\"\n      })));\n    }\n  }, {\n    key: \"renderCopy\",\n    value: function renderCopy() {\n      var copied = this.state.copied;\n      var _this$props4 = this.props,\n        copyable = _this$props4.copyable,\n        prefixCls = _this$props4.prefixCls;\n      if (!copyable) return;\n      var title = copied ? this.copiedStr : this.copyStr;\n      return React.createElement(Tooltip, {\n        key: \"copy\",\n        title: title\n      }, React.createElement(TransButton, {\n        className: classNames(\"\".concat(prefixCls, \"-copy\"), copied && \"\".concat(prefixCls, \"-copy-success\")),\n        onClick: this.onCopyClick,\n        \"aria-label\": title\n      }, React.createElement(Icon, {\n        role: \"button\",\n        type: copied ? 'check' : 'copy'\n      })));\n    }\n  }, {\n    key: \"renderEditInput\",\n    value: function renderEditInput() {\n      var _this$props5 = this.props,\n        children = _this$props5.children,\n        prefixCls = _this$props5.prefixCls,\n        className = _this$props5.className,\n        style = _this$props5.style;\n      return React.createElement(Editable, {\n        value: typeof children === 'string' ? children : '',\n        onSave: this.onEditChange,\n        onCancel: this.onEditCancel,\n        prefixCls: prefixCls,\n        className: className,\n        style: style\n      });\n    }\n  }, {\n    key: \"renderOperations\",\n    value: function renderOperations(forceRenderExpanded) {\n      return [this.renderExpand(forceRenderExpanded), this.renderEdit(), this.renderCopy()].filter(function (node) {\n        return node;\n      });\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this2 = this;\n      var _this$state3 = this.state,\n        ellipsisContent = _this$state3.ellipsisContent,\n        isEllipsis = _this$state3.isEllipsis,\n        expanded = _this$state3.expanded;\n      var _a = this.props,\n        component = _a.component,\n        children = _a.children,\n        className = _a.className,\n        prefixCls = _a.prefixCls,\n        type = _a.type,\n        disabled = _a.disabled,\n        style = _a.style,\n        restProps = __rest(_a, [\"component\", \"children\", \"className\", \"prefixCls\", \"type\", \"disabled\", \"style\"]);\n      var _this$getEllipsis5 = this.getEllipsis(),\n        rows = _this$getEllipsis5.rows;\n      var textProps = omit(restProps, ['prefixCls', 'editable', 'copyable', 'ellipsis', 'mark', 'underline', 'mark', 'code', 'delete', 'underline', 'strong'].concat(_toConsumableArray(configConsumerProps)));\n      var cssEllipsis = this.canUseCSSEllipsis();\n      var cssTextOverflow = rows === 1 && cssEllipsis;\n      var cssLineClamp = rows && rows > 1 && cssEllipsis;\n      var textNode = children;\n      var ariaLabel = null; // Only use js ellipsis when css ellipsis not support\n\n      if (rows && isEllipsis && !expanded && !cssEllipsis) {\n        ariaLabel = String(children); // We move full content to outer element to avoid repeat read the content by accessibility\n\n        textNode = React.createElement(\"span\", {\n          title: String(children),\n          \"aria-hidden\": \"true\"\n        }, ellipsisContent, ELLIPSIS_STR);\n      }\n      textNode = wrapperDecorations(this.props, textNode);\n      return React.createElement(LocaleReceiver, {\n        componentName: \"Text\"\n      }, function (_ref4) {\n        var _classNames;\n        var edit = _ref4.edit,\n          copyStr = _ref4.copy,\n          copied = _ref4.copied,\n          expand = _ref4.expand;\n        _this2.editStr = edit;\n        _this2.copyStr = copyStr;\n        _this2.copiedStr = copied;\n        _this2.expandStr = expand;\n        return React.createElement(ResizeObserver, {\n          onResize: _this2.resizeOnNextFrame,\n          disabled: !rows\n        }, React.createElement(Typography, _extends({\n          className: classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(type), type), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis\"), rows), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis-single-line\"), cssTextOverflow), _defineProperty(_classNames, \"\".concat(prefixCls, \"-ellipsis-multiple-line\"), cssLineClamp), _classNames)),\n          style: _extends(_extends({}, style), {\n            WebkitLineClamp: cssLineClamp ? rows : null\n          }),\n          component: component,\n          ref: _this2.setContentRef,\n          \"aria-label\": ariaLabel\n        }, textProps), textNode, _this2.renderOperations()));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$getEditable3 = this.getEditable(),\n        editing = _this$getEditable3.editing;\n      if (editing) {\n        return this.renderEditInput();\n      }\n      return this.renderContent();\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      var children = nextProps.children,\n        editable = nextProps.editable;\n      warning(!editable || typeof children === 'string', 'Typography', 'When `editable` is enabled, the `children` should use string.');\n      return {};\n    }\n  }]);\n  return Base;\n}(React.Component);\nBase.defaultProps = {\n  children: ''\n};\npolyfill(Base);\nexport default withConfigConsumer({\n  prefixCls: 'typography'\n})(Base);","map":{"version":3,"mappings":"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","names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","classNames","polyfill","toArray","findDOMNode","copy","omit","ResizeObserver","configConsumerProps","withConfigConsumer","LocaleReceiver","warning","TransButton","raf","isStyleSupport","Icon","Tooltip","Typography","Editable","measure","isLineClampSupport","isTextOverflowSupport","wrapperDecorations","content","mark","code","underline","del","strong","currentContent","wrap","needed","tag","createElement","ELLIPSIS_STR","Base","_classCallCheck","_this","arguments","state","edit","copied","ellipsisText","ellipsisContent","isEllipsis","expanded","clientRendered","onExpandClick","getEllipsis","onExpand","setState","onEditClick","triggerEdit","onEditChange","value","getEditable","onChange","onEditCancel","onCopyClick","props","children","copyable","copyConfig","_extends","_typeof","text","undefined","String","onCopy","copyId","window","setTimeout","setContentRef","node","setEditRef","editIcon","onStart","focus","resizeOnNextFrame","cancel","rafId","syncEllipsis","prevProps","ellipsis","prevEllipsis","rows","clearTimeout","editable","editing","expandable","canUseCSSEllipsis","every","child","renderOperations","forceRender","prefixCls","key","className","onClick","expandStr","title","editStr","ref","role","type","copiedStr","copyStr","style","onSave","onCancel","forceRenderExpanded","renderExpand","renderEdit","renderCopy","filter","component","_a","disabled","restProps","textProps","cssEllipsis","cssTextOverflow","cssLineClamp","textNode","ariaLabel","componentName","expand","_this2","onResize","WebkitLineClamp","renderEditInput","renderContent","nextProps","Component","defaultProps"],"sources":["C:\\xampp\\htdocs\\teambuilding-photo\\node_modules\\antd\\es\\typography\\typography\\Base.jsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport findDOMNode from 'rc-util/lib/Dom/findDOMNode';\nimport copy from 'copy-to-clipboard';\nimport omit from 'omit.js';\nimport ResizeObserver from 'rc-resize-observer';\nimport { configConsumerProps } from '../config-provider';\nimport { withConfigConsumer } from '../config-provider/context';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning';\nimport TransButton from '../_util/transButton';\nimport raf from '../_util/raf';\nimport isStyleSupport from '../_util/styleChecker';\nimport Icon from '../icon';\nimport Tooltip from '../tooltip';\nimport Typography from './Typography';\nimport Editable from './Editable';\nimport measure from './util';\nconst isLineClampSupport = isStyleSupport('webkitLineClamp');\nconst isTextOverflowSupport = isStyleSupport('textOverflow');\nfunction wrapperDecorations({ mark, code, underline, delete: del, strong }, content) {\n    let currentContent = content;\n    function wrap(needed, tag) {\n        if (!needed)\n            return;\n        currentContent = React.createElement(tag, {}, currentContent);\n    }\n    wrap(strong, 'strong');\n    wrap(underline, 'u');\n    wrap(del, 'del');\n    wrap(code, 'code');\n    wrap(mark, 'mark');\n    return currentContent;\n}\nconst ELLIPSIS_STR = '...';\nclass Base extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            edit: false,\n            copied: false,\n            ellipsisText: '',\n            ellipsisContent: null,\n            isEllipsis: false,\n            expanded: false,\n            clientRendered: false,\n        };\n        // =============== Expend ===============\n        this.onExpandClick = () => {\n            const { onExpand } = this.getEllipsis();\n            this.setState({ expanded: true });\n            if (onExpand) {\n                onExpand();\n            }\n        };\n        // ================ Edit ================\n        this.onEditClick = () => {\n            this.triggerEdit(true);\n        };\n        this.onEditChange = (value) => {\n            const { onChange } = this.getEditable();\n            if (onChange) {\n                onChange(value);\n            }\n            this.triggerEdit(false);\n        };\n        this.onEditCancel = () => {\n            this.triggerEdit(false);\n        };\n        // ================ Copy ================\n        this.onCopyClick = () => {\n            const { children, copyable } = this.props;\n            const copyConfig = Object.assign({}, (typeof copyable === 'object' ? copyable : null));\n            if (copyConfig.text === undefined) {\n                copyConfig.text = String(children);\n            }\n            copy(copyConfig.text || '');\n            this.setState({ copied: true }, () => {\n                if (copyConfig.onCopy) {\n                    copyConfig.onCopy();\n                }\n                this.copyId = window.setTimeout(() => {\n                    this.setState({ copied: false });\n                }, 3000);\n            });\n        };\n        this.setContentRef = (node) => {\n            this.content = node;\n        };\n        this.setEditRef = (node) => {\n            this.editIcon = node;\n        };\n        this.triggerEdit = (edit) => {\n            const { onStart } = this.getEditable();\n            if (edit && onStart) {\n                onStart();\n            }\n            this.setState({ edit }, () => {\n                if (!edit && this.editIcon) {\n                    this.editIcon.focus();\n                }\n            });\n        };\n        // ============== Ellipsis ==============\n        this.resizeOnNextFrame = () => {\n            raf.cancel(this.rafId);\n            this.rafId = raf(() => {\n                // Do not bind `syncEllipsis`. It need for test usage on prototype\n                this.syncEllipsis();\n            });\n        };\n    }\n    static getDerivedStateFromProps(nextProps) {\n        const { children, editable } = nextProps;\n        warning(!editable || typeof children === 'string', 'Typography', 'When `editable` is enabled, the `children` should use string.');\n        return {};\n    }\n    componentDidMount() {\n        this.setState({ clientRendered: true });\n        this.resizeOnNextFrame();\n    }\n    componentDidUpdate(prevProps) {\n        const { children } = this.props;\n        const ellipsis = this.getEllipsis();\n        const prevEllipsis = this.getEllipsis(prevProps);\n        if (children !== prevProps.children || ellipsis.rows !== prevEllipsis.rows) {\n            this.resizeOnNextFrame();\n        }\n    }\n    componentWillUnmount() {\n        window.clearTimeout(this.copyId);\n        raf.cancel(this.rafId);\n    }\n    getEditable(props) {\n        const { edit } = this.state;\n        const { editable } = props || this.props;\n        if (!editable)\n            return { editing: edit };\n        return Object.assign({ editing: edit }, (typeof editable === 'object' ? editable : null));\n    }\n    getEllipsis(props) {\n        const { ellipsis } = props || this.props;\n        if (!ellipsis)\n            return {};\n        return Object.assign({ rows: 1, expandable: false }, (typeof ellipsis === 'object' ? ellipsis : null));\n    }\n    canUseCSSEllipsis() {\n        const { clientRendered } = this.state;\n        const { editable, copyable } = this.props;\n        const { rows, expandable } = this.getEllipsis();\n        // Can't use css ellipsis since we need to provide the place for button\n        if (editable || copyable || expandable || !clientRendered) {\n            return false;\n        }\n        if (rows === 1) {\n            return isTextOverflowSupport;\n        }\n        return isLineClampSupport;\n    }\n    syncEllipsis() {\n        const { ellipsisText, isEllipsis, expanded } = this.state;\n        const { rows } = this.getEllipsis();\n        const { children } = this.props;\n        if (!rows || rows < 0 || !this.content || expanded)\n            return;\n        // Do not measure if css already support ellipsis\n        if (this.canUseCSSEllipsis())\n            return;\n        warning(toArray(children).every((child) => typeof child === 'string'), 'Typography', '`ellipsis` should use string as children only.');\n        const { content, text, ellipsis } = measure(findDOMNode(this.content), rows, children, this.renderOperations(true), ELLIPSIS_STR);\n        if (ellipsisText !== text || isEllipsis !== ellipsis) {\n            this.setState({ ellipsisText: text, ellipsisContent: content, isEllipsis: ellipsis });\n        }\n    }\n    renderExpand(forceRender) {\n        const { expandable } = this.getEllipsis();\n        const { prefixCls } = this.props;\n        const { expanded, isEllipsis } = this.state;\n        if (!expandable)\n            return null;\n        // force render expand icon for measure usage or it will cause dead loop\n        if (!forceRender && (expanded || !isEllipsis))\n            return null;\n        return (<a key=\"expand\" className={`${prefixCls}-expand`} onClick={this.onExpandClick} aria-label={this.expandStr}>\n        {this.expandStr}\n      </a>);\n    }\n    renderEdit() {\n        const { editable, prefixCls } = this.props;\n        if (!editable)\n            return;\n        return (<Tooltip key=\"edit\" title={this.editStr}>\n        <TransButton ref={this.setEditRef} className={`${prefixCls}-edit`} onClick={this.onEditClick} aria-label={this.editStr}>\n          <Icon role=\"button\" type=\"edit\"/>\n        </TransButton>\n      </Tooltip>);\n    }\n    renderCopy() {\n        const { copied } = this.state;\n        const { copyable, prefixCls } = this.props;\n        if (!copyable)\n            return;\n        const title = copied ? this.copiedStr : this.copyStr;\n        return (<Tooltip key=\"copy\" title={title}>\n        <TransButton className={classNames(`${prefixCls}-copy`, copied && `${prefixCls}-copy-success`)} onClick={this.onCopyClick} aria-label={title}>\n          <Icon role=\"button\" type={copied ? 'check' : 'copy'}/>\n        </TransButton>\n      </Tooltip>);\n    }\n    renderEditInput() {\n        const { children, prefixCls, className, style } = this.props;\n        return (<Editable value={typeof children === 'string' ? children : ''} onSave={this.onEditChange} onCancel={this.onEditCancel} prefixCls={prefixCls} className={className} style={style}/>);\n    }\n    renderOperations(forceRenderExpanded) {\n        return [this.renderExpand(forceRenderExpanded), this.renderEdit(), this.renderCopy()].filter(node => node);\n    }\n    renderContent() {\n        const { ellipsisContent, isEllipsis, expanded } = this.state;\n        const _a = this.props, { component, children, className, prefixCls, type, disabled, style } = _a, restProps = __rest(_a, [\"component\", \"children\", \"className\", \"prefixCls\", \"type\", \"disabled\", \"style\"]);\n        const { rows } = this.getEllipsis();\n        const textProps = omit(restProps, [\n            'prefixCls',\n            'editable',\n            'copyable',\n            'ellipsis',\n            'mark',\n            'underline',\n            'mark',\n            'code',\n            'delete',\n            'underline',\n            'strong',\n            ...configConsumerProps,\n        ]);\n        const cssEllipsis = this.canUseCSSEllipsis();\n        const cssTextOverflow = rows === 1 && cssEllipsis;\n        const cssLineClamp = rows && rows > 1 && cssEllipsis;\n        let textNode = children;\n        let ariaLabel = null;\n        // Only use js ellipsis when css ellipsis not support\n        if (rows && isEllipsis && !expanded && !cssEllipsis) {\n            ariaLabel = String(children);\n            // We move full content to outer element to avoid repeat read the content by accessibility\n            textNode = (<span title={String(children)} aria-hidden=\"true\">\n          {ellipsisContent}\n          {ELLIPSIS_STR}\n        </span>);\n        }\n        textNode = wrapperDecorations(this.props, textNode);\n        return (<LocaleReceiver componentName=\"Text\">\n        {({ edit, copy: copyStr, copied, expand }) => {\n            this.editStr = edit;\n            this.copyStr = copyStr;\n            this.copiedStr = copied;\n            this.expandStr = expand;\n            return (<ResizeObserver onResize={this.resizeOnNextFrame} disabled={!rows}>\n              <Typography className={classNames(className, {\n                [`${prefixCls}-${type}`]: type,\n                [`${prefixCls}-disabled`]: disabled,\n                [`${prefixCls}-ellipsis`]: rows,\n                [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n                [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp,\n            })} style={Object.assign(Object.assign({}, style), { WebkitLineClamp: cssLineClamp ? rows : null })} component={component} ref={this.setContentRef} aria-label={ariaLabel} {...textProps}>\n                {textNode}\n                {this.renderOperations()}\n              </Typography>\n            </ResizeObserver>);\n        }}\n      </LocaleReceiver>);\n    }\n    render() {\n        const { editing } = this.getEditable();\n        if (editing) {\n            return this.renderEditInput();\n        }\n        return this.renderContent();\n    }\n}\nBase.defaultProps = {\n    children: '',\n};\npolyfill(Base);\nexport default withConfigConsumer({\n    prefixCls: 'typography',\n})(Base);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}