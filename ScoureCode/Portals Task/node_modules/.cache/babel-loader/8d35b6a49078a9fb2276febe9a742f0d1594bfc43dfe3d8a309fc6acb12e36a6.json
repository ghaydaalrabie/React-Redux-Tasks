{"ast":null,"code":"// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\nvar HIDDEN_TEXTAREA_STYLE = \"\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n\";\nvar SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'font-variant', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];\nvar computedStyleCache = {};\nvar hiddenTextarea;\nexport function calculateNodeStyling(node) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');\n  if (useCache && computedStyleCache[nodeRef]) {\n    return computedStyleCache[nodeRef];\n  }\n  var style = window.getComputedStyle(node);\n  var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');\n  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));\n  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));\n  var sizingStyle = SIZING_STYLE.map(function (name) {\n    return \"\".concat(name, \":\").concat(style.getPropertyValue(name));\n  }).join(';');\n  var nodeInfo = {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize,\n    boxSizing: boxSizing\n  };\n  if (useCache && nodeRef) {\n    computedStyleCache[nodeRef] = nodeInfo;\n  }\n  return nodeInfo;\n}\nexport default function calculateNodeHeight(uiTextNode) {\n  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    document.body.appendChild(hiddenTextarea);\n  } // Fix wrap=\"off\" issue\n  // https://github.com/ant-design/ant-design/issues/6577\n\n  if (uiTextNode.getAttribute('wrap')) {\n    hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n  } else {\n    hiddenTextarea.removeAttribute('wrap');\n  } // Copy all CSS properties that have an impact on the height of the content in\n  // the textbox\n\n  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),\n    paddingSize = _calculateNodeStyling.paddingSize,\n    borderSize = _calculateNodeStyling.borderSize,\n    boxSizing = _calculateNodeStyling.boxSizing,\n    sizingStyle = _calculateNodeStyling.sizingStyle; // Need to have the overflow attribute to hide the scrollbar otherwise\n  // text-lines will not calculated properly as the shadow will technically be\n  // narrower for content\n\n  hiddenTextarea.setAttribute('style', \"\".concat(sizingStyle, \";\").concat(HIDDEN_TEXTAREA_STYLE));\n  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n  var minHeight = Number.MIN_SAFE_INTEGER;\n  var maxHeight = Number.MAX_SAFE_INTEGER;\n  var height = hiddenTextarea.scrollHeight;\n  var overflowY;\n  if (boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    height += borderSize;\n  } else if (boxSizing === 'content-box') {\n    // remove padding, since height = content\n    height -= paddingSize;\n  }\n  if (minRows !== null || maxRows !== null) {\n    // measure height of a textarea with a single row\n    hiddenTextarea.value = ' ';\n    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n    if (minRows !== null) {\n      minHeight = singleRowHeight * minRows;\n      if (boxSizing === 'border-box') {\n        minHeight = minHeight + paddingSize + borderSize;\n      }\n      height = Math.max(minHeight, height);\n    }\n    if (maxRows !== null) {\n      maxHeight = singleRowHeight * maxRows;\n      if (boxSizing === 'border-box') {\n        maxHeight = maxHeight + paddingSize + borderSize;\n      }\n      overflowY = height > maxHeight ? '' : 'hidden';\n      height = Math.min(maxHeight, height);\n    }\n  }\n  return {\n    height: height,\n    minHeight: minHeight,\n    maxHeight: maxHeight,\n    overflowY: overflowY\n  };\n}","map":{"version":3,"mappings":"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","names":["HIDDEN_TEXTAREA_STYLE","SIZING_STYLE","computedStyleCache","hiddenTextarea","calculateNodeStyling","node","useCache","nodeRef","getAttribute","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","parseFloat","borderSize","sizingStyle","map","name","join","nodeInfo","calculateNodeHeight","uiTextNode","minRows","maxRows","document","createElement","body","appendChild","setAttribute","removeAttribute","value","placeholder","minHeight","Number","MIN_SAFE_INTEGER","maxHeight","MAX_SAFE_INTEGER","height","scrollHeight","overflowY","singleRowHeight","Math","max","min"],"sources":["C:\\xampp\\htdocs\\teambuilding-photo\\node_modules\\antd\\es\\input\\input\\calculateNodeHeight.jsx"],"sourcesContent":["// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\nconst HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n`;\nconst SIZING_STYLE = [\n    'letter-spacing',\n    'line-height',\n    'padding-top',\n    'padding-bottom',\n    'font-family',\n    'font-weight',\n    'font-size',\n    'font-variant',\n    'text-rendering',\n    'text-transform',\n    'width',\n    'text-indent',\n    'padding-left',\n    'padding-right',\n    'border-width',\n    'box-sizing',\n];\nconst computedStyleCache = {};\nlet hiddenTextarea;\nexport function calculateNodeStyling(node, useCache = false) {\n    const nodeRef = (node.getAttribute('id') ||\n        node.getAttribute('data-reactid') ||\n        node.getAttribute('name'));\n    if (useCache && computedStyleCache[nodeRef]) {\n        return computedStyleCache[nodeRef];\n    }\n    const style = window.getComputedStyle(node);\n    const boxSizing = style.getPropertyValue('box-sizing') ||\n        style.getPropertyValue('-moz-box-sizing') ||\n        style.getPropertyValue('-webkit-box-sizing');\n    const paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) +\n        parseFloat(style.getPropertyValue('padding-top'));\n    const borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) +\n        parseFloat(style.getPropertyValue('border-top-width'));\n    const sizingStyle = SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(';');\n    const nodeInfo = {\n        sizingStyle,\n        paddingSize,\n        borderSize,\n        boxSizing,\n    };\n    if (useCache && nodeRef) {\n        computedStyleCache[nodeRef] = nodeInfo;\n    }\n    return nodeInfo;\n}\nexport default function calculateNodeHeight(uiTextNode, useCache = false, minRows = null, maxRows = null) {\n    if (!hiddenTextarea) {\n        hiddenTextarea = document.createElement('textarea');\n        document.body.appendChild(hiddenTextarea);\n    }\n    // Fix wrap=\"off\" issue\n    // https://github.com/ant-design/ant-design/issues/6577\n    if (uiTextNode.getAttribute('wrap')) {\n        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n    }\n    else {\n        hiddenTextarea.removeAttribute('wrap');\n    }\n    // Copy all CSS properties that have an impact on the height of the content in\n    // the textbox\n    const { paddingSize, borderSize, boxSizing, sizingStyle } = calculateNodeStyling(uiTextNode, useCache);\n    // Need to have the overflow attribute to hide the scrollbar otherwise\n    // text-lines will not calculated properly as the shadow will technically be\n    // narrower for content\n    hiddenTextarea.setAttribute('style', `${sizingStyle};${HIDDEN_TEXTAREA_STYLE}`);\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n    let minHeight = Number.MIN_SAFE_INTEGER;\n    let maxHeight = Number.MAX_SAFE_INTEGER;\n    let height = hiddenTextarea.scrollHeight;\n    let overflowY;\n    if (boxSizing === 'border-box') {\n        // border-box: add border, since height = content + padding + border\n        height += borderSize;\n    }\n    else if (boxSizing === 'content-box') {\n        // remove padding, since height = content\n        height -= paddingSize;\n    }\n    if (minRows !== null || maxRows !== null) {\n        // measure height of a textarea with a single row\n        hiddenTextarea.value = ' ';\n        const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n        if (minRows !== null) {\n            minHeight = singleRowHeight * minRows;\n            if (boxSizing === 'border-box') {\n                minHeight = minHeight + paddingSize + borderSize;\n            }\n            height = Math.max(minHeight, height);\n        }\n        if (maxRows !== null) {\n            maxHeight = singleRowHeight * maxRows;\n            if (boxSizing === 'border-box') {\n                maxHeight = maxHeight + paddingSize + borderSize;\n            }\n            overflowY = height > maxHeight ? '' : 'hidden';\n            height = Math.min(maxHeight, height);\n        }\n    }\n    return { height, minHeight, maxHeight, overflowY };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}