{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport * as React from 'react';\nimport RcTree, { TreeNode } from 'rc-tree';\nimport classNames from 'classnames';\nimport DirectoryTree from './DirectoryTree';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport collapseMotion from '../_util/motion';\nvar Tree = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tree, _React$Component);\n  function Tree() {\n    var _this;\n    _classCallCheck(this, Tree);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tree).apply(this, arguments));\n    _this.renderSwitcherIcon = function (prefixCls, switcherIcon, _ref) {\n      var isLeaf = _ref.isLeaf,\n        expanded = _ref.expanded,\n        loading = _ref.loading,\n        icon = _ref.icon;\n      var showLine = _this.props.showLine;\n      if (loading) {\n        return React.createElement(Icon, {\n          type: \"loading\",\n          className: \"\".concat(prefixCls, \"-switcher-loading-icon\")\n        });\n      }\n      if (isLeaf) {\n        if (showLine) {\n          return icon || React.createElement(Icon, {\n            type: \"file\",\n            className: \"\".concat(prefixCls, \"-switcher-line-icon\")\n          });\n        }\n        return null;\n      }\n      var switcherCls = \"\".concat(prefixCls, \"-switcher-icon\");\n      if (switcherIcon) {\n        return React.cloneElement(switcherIcon, {\n          className: classNames(switcherIcon.props.className || '', switcherCls)\n        });\n      }\n      if (showLine) {\n        return icon || React.createElement(Icon, {\n          type: expanded ? 'minus-square' : 'plus-square',\n          className: \"\".concat(prefixCls, \"-switcher-line-icon\"),\n          theme: \"outlined\"\n        });\n      }\n      return React.createElement(Icon, {\n        type: \"caret-down\",\n        className: switcherCls,\n        theme: \"filled\"\n      });\n    };\n    _this.setTreeRef = function (node) {\n      _this.tree = node;\n    };\n    _this.renderTree = function (_ref2) {\n      var _classNames;\n      var getPrefixCls = _ref2.getPrefixCls;\n      var _assertThisInitialize = _assertThisInitialized(_this),\n        props = _assertThisInitialize.props;\n      var customizePrefixCls = props.prefixCls,\n        className = props.className,\n        showIcon = props.showIcon,\n        showLine = props.showLine,\n        _switcherIcon = props.switcherIcon,\n        blockNode = props.blockNode,\n        children = props.children;\n      var checkable = props.checkable;\n      var prefixCls = getPrefixCls('tree', customizePrefixCls);\n      return React.createElement(RcTree, _extends({\n        ref: _this.setTreeRef\n      }, props, {\n        // Hide icon in node when showLine is true, show icon in line always\n        // https://github.com/ant-design/ant-design/issues/20090\n        showIcon: showLine ? false : showIcon,\n        prefixCls: prefixCls,\n        className: classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-icon-hide\"), !showIcon), _defineProperty(_classNames, \"\".concat(prefixCls, \"-block-node\"), blockNode), _classNames)),\n        checkable: checkable ? React.createElement(\"span\", {\n          className: \"\".concat(prefixCls, \"-checkbox-inner\")\n        }) : checkable,\n        switcherIcon: function switcherIcon(nodeProps) {\n          return _this.renderSwitcherIcon(prefixCls, _switcherIcon, nodeProps);\n        }\n      }), children);\n    };\n    return _this;\n  }\n  _createClass(Tree, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderTree);\n    }\n  }]);\n  return Tree;\n}(React.Component);\nexport { Tree as default };\nTree.TreeNode = TreeNode;\nTree.DirectoryTree = DirectoryTree;\nTree.defaultProps = {\n  checkable: false,\n  showIcon: false,\n  motion: _extends(_extends({}, collapseMotion), {\n    motionAppear: false\n  }),\n  blockNode: false\n};","map":{"version":3,"mappings":"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","names":["React","RcTree","TreeNode","classNames","DirectoryTree","Icon","ConfigConsumer","collapseMotion","Tree","_classCallCheck","_this","arguments","renderSwitcherIcon","prefixCls","switcherIcon","isLeaf","expanded","loading","icon","showLine","props","type","className","switcherCls","cloneElement","theme","setTreeRef","node","tree","renderTree","getPrefixCls","customizePrefixCls","showIcon","blockNode","children","checkable","ref","nodeProps","Component","defaultProps","motion","_extends","motionAppear"],"sources":["C:\\xampp\\htdocs\\teambuilding-photo\\node_modules\\antd\\es\\tree\\tree\\Tree.jsx"],"sourcesContent":["import * as React from 'react';\nimport RcTree, { TreeNode } from 'rc-tree';\nimport classNames from 'classnames';\nimport DirectoryTree from './DirectoryTree';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport collapseMotion from '../_util/motion';\nexport default class Tree extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderSwitcherIcon = (prefixCls, switcherIcon, { isLeaf, expanded, loading, icon }) => {\n            const { showLine } = this.props;\n            if (loading) {\n                return <Icon type=\"loading\" className={`${prefixCls}-switcher-loading-icon`}/>;\n            }\n            if (isLeaf) {\n                if (showLine) {\n                    return icon || <Icon type=\"file\" className={`${prefixCls}-switcher-line-icon`}/>;\n                }\n                return null;\n            }\n            const switcherCls = `${prefixCls}-switcher-icon`;\n            if (switcherIcon) {\n                return React.cloneElement(switcherIcon, {\n                    className: classNames(switcherIcon.props.className || '', switcherCls),\n                });\n            }\n            if (showLine) {\n                return icon || (<Icon type={expanded ? 'minus-square' : 'plus-square'} className={`${prefixCls}-switcher-line-icon`} theme=\"outlined\"/>);\n            }\n            return <Icon type=\"caret-down\" className={switcherCls} theme=\"filled\"/>;\n        };\n        this.setTreeRef = (node) => {\n            this.tree = node;\n        };\n        this.renderTree = ({ getPrefixCls }) => {\n            const { props } = this;\n            const { prefixCls: customizePrefixCls, className, showIcon, showLine, switcherIcon, blockNode, children, } = props;\n            const { checkable } = props;\n            const prefixCls = getPrefixCls('tree', customizePrefixCls);\n            return (<RcTree ref={this.setTreeRef} {...props} \n            // Hide icon in node when showLine is true, show icon in line always\n            // https://github.com/ant-design/ant-design/issues/20090\n            showIcon={showLine ? false : showIcon} prefixCls={prefixCls} className={classNames(className, {\n                [`${prefixCls}-icon-hide`]: !showIcon,\n                [`${prefixCls}-block-node`]: blockNode,\n            })} checkable={checkable ? <span className={`${prefixCls}-checkbox-inner`}/> : checkable} switcherIcon={(nodeProps) => this.renderSwitcherIcon(prefixCls, switcherIcon, nodeProps)}>\n        {children}\n      </RcTree>);\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTree}</ConfigConsumer>;\n    }\n}\nTree.TreeNode = TreeNode;\nTree.DirectoryTree = DirectoryTree;\nTree.defaultProps = {\n    checkable: false,\n    showIcon: false,\n    motion: Object.assign(Object.assign({}, collapseMotion), { motionAppear: false }),\n    blockNode: false,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}