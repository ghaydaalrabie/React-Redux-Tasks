{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Circle as RCCircle } from 'rc-progress';\nimport classNames from 'classnames';\nimport { validProgress } from './utils';\nvar statusColorMap = {\n  normal: '#108ee9',\n  exception: '#ff5500',\n  success: '#87d068'\n};\nfunction getPercentage(_ref) {\n  var percent = _ref.percent,\n    successPercent = _ref.successPercent;\n  var ptg = validProgress(percent);\n  if (!successPercent) {\n    return ptg;\n  }\n  var successPtg = validProgress(successPercent);\n  return [successPercent, validProgress(ptg - successPtg)];\n}\nfunction getStrokeColor(_ref2) {\n  var progressStatus = _ref2.progressStatus,\n    successPercent = _ref2.successPercent,\n    strokeColor = _ref2.strokeColor;\n  var color = strokeColor || statusColorMap[progressStatus];\n  if (!successPercent) {\n    return color;\n  }\n  return [statusColorMap.success, color];\n}\nvar Circle = function Circle(props) {\n  var prefixCls = props.prefixCls,\n    width = props.width,\n    strokeWidth = props.strokeWidth,\n    trailColor = props.trailColor,\n    strokeLinecap = props.strokeLinecap,\n    gapPosition = props.gapPosition,\n    gapDegree = props.gapDegree,\n    type = props.type,\n    children = props.children;\n  var circleSize = width || 120;\n  var circleStyle = {\n    width: circleSize,\n    height: circleSize,\n    fontSize: circleSize * 0.15 + 6\n  };\n  var circleWidth = strokeWidth || 6;\n  var gapPos = gapPosition || type === 'dashboard' && 'bottom' || 'top';\n  var gapDeg = gapDegree || (type === 'dashboard' ? 75 : undefined);\n  var strokeColor = getStrokeColor(props);\n  var isGradient = Object.prototype.toString.call(strokeColor) === '[object Object]';\n  var wrapperClassName = classNames(\"\".concat(prefixCls, \"-inner\"), _defineProperty({}, \"\".concat(prefixCls, \"-circle-gradient\"), isGradient));\n  return React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: circleWidth,\n    trailWidth: circleWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: gapDeg,\n    gapPosition: gapPos\n  }), children);\n};\nexport default Circle;","map":{"version":3,"mappings":"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","names":["React","Circle","RCCircle","classNames","validProgress","statusColorMap","normal","exception","success","getPercentage","percent","successPercent","ptg","successPtg","getStrokeColor","progressStatus","strokeColor","color","prefixCls","props","width","strokeWidth","trailColor","strokeLinecap","gapPosition","gapDegree","type","children","circleSize","circleStyle","height","fontSize","circleWidth","gapPos","gapDeg","undefined","isGradient","Object","prototype","toString","call","wrapperClassName","className","style","trailWidth"],"sources":["C:\\xampp\\htdocs\\teambuilding-photo\\node_modules\\antd\\es\\progress\\progress\\Circle.jsx"],"sourcesContent":["import * as React from 'react';\nimport { Circle as RCCircle } from 'rc-progress';\nimport classNames from 'classnames';\nimport { validProgress } from './utils';\nconst statusColorMap = {\n    normal: '#108ee9',\n    exception: '#ff5500',\n    success: '#87d068',\n};\nfunction getPercentage({ percent, successPercent }) {\n    const ptg = validProgress(percent);\n    if (!successPercent) {\n        return ptg;\n    }\n    const successPtg = validProgress(successPercent);\n    return [successPercent, validProgress(ptg - successPtg)];\n}\nfunction getStrokeColor({ progressStatus, successPercent, strokeColor }) {\n    const color = strokeColor || statusColorMap[progressStatus];\n    if (!successPercent) {\n        return color;\n    }\n    return [statusColorMap.success, color];\n}\nconst Circle = props => {\n    const { prefixCls, width, strokeWidth, trailColor, strokeLinecap, gapPosition, gapDegree, type, children, } = props;\n    const circleSize = width || 120;\n    const circleStyle = {\n        width: circleSize,\n        height: circleSize,\n        fontSize: circleSize * 0.15 + 6,\n    };\n    const circleWidth = strokeWidth || 6;\n    const gapPos = gapPosition || (type === 'dashboard' && 'bottom') || 'top';\n    const gapDeg = gapDegree || (type === 'dashboard' ? 75 : undefined);\n    const strokeColor = getStrokeColor(props);\n    const isGradient = Object.prototype.toString.call(strokeColor) === '[object Object]';\n    const wrapperClassName = classNames(`${prefixCls}-inner`, {\n        [`${prefixCls}-circle-gradient`]: isGradient,\n    });\n    return (<div className={wrapperClassName} style={circleStyle}>\n      <RCCircle percent={getPercentage(props)} strokeWidth={circleWidth} trailWidth={circleWidth} strokeColor={strokeColor} strokeLinecap={strokeLinecap} trailColor={trailColor} prefixCls={prefixCls} gapDegree={gapDeg} gapPosition={gapPos}/>\n      {children}\n    </div>);\n};\nexport default Circle;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}