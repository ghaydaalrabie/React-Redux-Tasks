{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nimport { getNodeChildren, convertTreeToEntities } from \"rc-tree/es/util\";\nvar Record;\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = getNodeChildren(rootChildren) || [];\n  function processNode(node) {\n    var key = node.key,\n      children = node.props.children;\n    if (callback(key, node) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n  nodeList.forEach(processNode);\n}\nexport function getFullKeyList(children) {\n  var _convertTreeToEntitie = convertTreeToEntities(children),\n    keyEntities = _convertTreeToEntitie.keyEntities;\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n  if (!startKey || !endKey) {\n    return [];\n  }\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n    return true;\n  });\n  return keys;\n}\nexport function convertDirectoryKeysToNodes(rootChildren, keys) {\n  var restKeys = _toConsumableArray(keys);\n  var nodes = [];\n  traverseNodesKey(rootChildren, function (key, node) {\n    var index = restKeys.indexOf(key);\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n    return !!restKeys.length;\n  });\n  return nodes;\n}\nexport function getFullKeyListByTreeData(treeData) {\n  var keys = [];\n  (treeData || []).forEach(function (item) {\n    keys.push(item.key);\n    if (item.children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(getFullKeyListByTreeData(item.children)));\n    }\n  });\n  return keys;\n}","map":{"version":3,"mappings":"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","names":["getNodeChildren","convertTreeToEntities","Record","traverseNodesKey","rootChildren","callback","nodeList","processNode","node","key","children","props","forEach","getFullKeyList","keyEntities","Object","keys","calcRangeKeys","expandedKeys","startKey","endKey","record","None","matchKey","End","push","Start","indexOf","convertDirectoryKeysToNodes","restKeys","nodes","index","splice","length","getFullKeyListByTreeData","treeData","item"],"sources":["C:\\xampp\\htdocs\\teambuilding-photo\\node_modules\\antd\\es\\tree\\tree\\util.js"],"sourcesContent":["import { getNodeChildren, convertTreeToEntities } from 'rc-tree/lib/util';\nvar Record;\n(function (Record) {\n    Record[Record[\"None\"] = 0] = \"None\";\n    Record[Record[\"Start\"] = 1] = \"Start\";\n    Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\n// TODO: Move this logic into `rc-tree`\nfunction traverseNodesKey(rootChildren, callback) {\n    const nodeList = getNodeChildren(rootChildren) || [];\n    function processNode(node) {\n        const { key, props: { children }, } = node;\n        if (callback(key, node) !== false) {\n            traverseNodesKey(children, callback);\n        }\n    }\n    nodeList.forEach(processNode);\n}\nexport function getFullKeyList(children) {\n    const { keyEntities } = convertTreeToEntities(children);\n    return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n    const keys = [];\n    let record = Record.None;\n    if (startKey && startKey === endKey) {\n        return [startKey];\n    }\n    if (!startKey || !endKey) {\n        return [];\n    }\n    function matchKey(key) {\n        return key === startKey || key === endKey;\n    }\n    traverseNodesKey(rootChildren, (key) => {\n        if (record === Record.End) {\n            return false;\n        }\n        if (matchKey(key)) {\n            // Match test\n            keys.push(key);\n            if (record === Record.None) {\n                record = Record.Start;\n            }\n            else if (record === Record.Start) {\n                record = Record.End;\n                return false;\n            }\n        }\n        else if (record === Record.Start) {\n            // Append selection\n            keys.push(key);\n        }\n        if (expandedKeys.indexOf(key) === -1) {\n            return false;\n        }\n        return true;\n    });\n    return keys;\n}\nexport function convertDirectoryKeysToNodes(rootChildren, keys) {\n    const restKeys = [...keys];\n    const nodes = [];\n    traverseNodesKey(rootChildren, (key, node) => {\n        const index = restKeys.indexOf(key);\n        if (index !== -1) {\n            nodes.push(node);\n            restKeys.splice(index, 1);\n        }\n        return !!restKeys.length;\n    });\n    return nodes;\n}\nexport function getFullKeyListByTreeData(treeData) {\n    let keys = [];\n    (treeData || []).forEach(item => {\n        keys.push(item.key);\n        if (item.children) {\n            keys = [...keys, ...getFullKeyListByTreeData(item.children)];\n        }\n    });\n    return keys;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}